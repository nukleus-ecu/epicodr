name: Release and Update DESCRIPTION

on:
  push:
    branches:
      - main
  workflow_dispatch:
  
jobs:
  check-commit:
    runs-on: ubuntu-latest
    outputs:
      message: ${{ steps.get-commit-message.outputs.message }} # Define job-level output
    steps:
      - name: Check out repository
        uses: actions/checkout@v4
      
      - name: Get the commit message
        id: get-commit-message
        run: |
          if [[ "${{ github.event_name }}" == "push" ]]; then
            COMMIT_SHA="${{ github.event.after }}"
          elif [[ "${{ github.eventname }}" == "pull_request" ]]; then
            COMMIT_SHA="${{ github.event.pull_request.head.sha }}"
          fi
          message=$(git log --format=%B -n 1 $COMMIT_SHA)
          echo "$message"
          echo "message<<EOF" >> $GITHUB_OUTPUT
          echo "$message" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          cat $GITHUB_OUTPUT
          
  check-on-push:
    runs-on: ubuntu-latest
    needs: check-commit
    if: ${{ !contains(needs.check-commit.outputs.message, 'norelease') }}
    env:
      GITHUB_PAT: ${{ secrets.MY_PAT }}
      R_KEEP_PKG_SOURCE: yes
    steps:
      - uses: actions/checkout@v4
      - uses: r-lib/actions/setup-r@v2
        with:
          use-public-rspm: true
      - uses: r-lib/actions/setup-r-dependencies@v2
        with:
          extra-packages: any::rcmdcheck
          needs: check
      - uses: r-lib/actions/check-r-package@v2
      
  release-on-push:
    runs-on: ubuntu-latest
    needs: check-on-push
    env:
      GITHUB_TOKEN: ${{ secrets.MY_PAT }}
    outputs:
      new_version: ${{ steps.create_release.outputs.version }}
    steps:
      - name: Create Release
        id: create_release
        uses: rymndhng/release-on-push-action@master
        with:
          bump_version_scheme: minor
          use_github_release_notes: true

  update-description:
    needs: release-on-push
    if: ${{ needs.release-on-push.outputs.new_version != '' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          # This is important to allow pushing to the protected branch
          token: ${{ secrets.MY_PAT }} # Use the PAT stored as a secret

      - name: Setup R
        uses: r-lib/actions/setup-r@v2

      - name: Update DESCRIPTION file with the new version
        run: |
          new_version="${{ needs.release-on-push.outputs.new_version }}"
          Rscript -e "new_version <- '${new_version}'; trimmed_version <- substring(new_version, 2); lines <- readLines('DESCRIPTION'); for (i in 1:length(lines)) { if (grepl('^Version:', lines[i])) { lines[i] <- paste('Version:', trimmed_version); break } }; writeLines(lines, 'DESCRIPTION')"
          # This R script reads the current DESCRIPTION file, updates the Version field, and writes the changes back

      - name: Commit and Push changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add DESCRIPTION
          git commit -m "Update version in DESCRIPTION [norelease]"
          git push
        env:
          # Use the PAT for pushing
          GIT_ASKPASS: echo ${{ secrets.MY_PAT }}

      - name: Trigger pkgdown Workflow
        run: |
          curl -X POST -H "Authorization: token ${{ secrets.MY_PAT }}" \
          -H "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${{ github.repository }}/dispatches \
          -d '{"event_type": "newVersionEvent", "client_payload": {"key": "value"}}'
